/* 
    Goal: Storing all variables that will be used in the project.
    Content: Variables for colors, fonts, sizes, padding, and other repeating values.
*/
/* 
    Goal: Identify mixins that can be reused for specific styles.
    Contents: Mixins for media queries, Flexbox, Grid, animations, etc.
*/
/* 
  ===== Usage =====
  div {
      @include box(200px, 300px);
      @include box(200px);
  }
*/
/*
  ===== Usage =====
  .vertical-centered-element {
      @include flex-center-vert;
  }

  .horizontally-centered-element {
      flex-direction: column;
      @include flex-center-vert;
  }
*/
/* 
  ===== Usage ===== 
  @include font-face(Roboto, "./assets/Roboto", normal, normal);
*/
/*
  ===== Usage =====
  h1 {
      font-size: 10px;

      @include tablet {
          font-size: 12px;
      }

      @include desktop {
          font-size: 20px;
      }
  }
*/
/* 
    Goal: Identify functions that can be used for calculations and transformations.
    Contents: Functions for calculating sizes, converting colors, etc.
*/
.demo-title {
  margin: 0 0 40px 0;
  padding: 0 16px;
}
.demo-nav {
  position: fixed;
  width: 100%;
  height: 100%;
  max-width: 400px;
  padding: 35px;
  background: rgba(0, 0, 0, 0.0784313725);
}
.demo-nav h2, .demo-nav h4, .demo-nav p, .demo-nav li {
  margin: 0 0 16px 0;
}
.demo-content h5, .demo-content h4 {
  font-weight: bold;
}
.demo-content section {
  margin: 0 0 40px 0;
}
.demo .items {
  padding: 50px 0 0 0;
}
.demo .items__item {
  display: grid;
  align-items: center;
  border-bottom: 1px solid lightgrey;
}
.demo .items__item > div {
  padding: 16px;
}
.demo .items__item .title {
  font-size: 0.875rem;
  font-weight: bold;
}
.demo .typography {
  grid-template-columns: 3fr 1.5fr 6fr;
}
.demo .colors {
  grid-template-columns: 1.5fr 1.5fr 9fr;
}
.demo .colors.text-primary {
  color: #333;
}
.demo .colors.text-primary div > .example {
  width: 16px;
  height: 16px;
  background: #333;
}
.demo .colors.text-secondary {
  color: rgba(0, 0, 0, 0.6);
}
.demo .colors.text-secondary div > .example {
  width: 16px;
  height: 16px;
  background: rgba(0, 0, 0, 0.6);
}
.demo .colors.text-disabled {
  color: rgba(0, 0, 0, 0.3803921569);
}
.demo .colors.text-disabled div > .example {
  width: 16px;
  height: 16px;
  background: rgba(0, 0, 0, 0.3803921569);
}
.demo .colors.main-primary {
  color: #3498db;
}
.demo .colors.main-primary div > .example {
  width: 16px;
  height: 16px;
  background: #3498db;
}
.demo .colors.main-secondary {
  color: #2ecc71;
}
.demo .colors.main-secondary div > .example {
  width: 16px;
  height: 16px;
  background: #2ecc71;
}
.demo .colors.main-background {
  color: #ffa500;
}
.demo .colors.main-background div > .example {
  width: 16px;
  height: 16px;
  background: #ffa500;
}
.demo .colors.main-border {
  color: #dd0b0b;
}
.demo .colors.main-border div > .example {
  width: 16px;
  height: 16px;
  background: #dd0b0b;
}
.demo .colors.input-background div > .example {
  width: 16px;
  height: 16px;
  background: rgba(0, 0, 0, 0.0588235294);
}
.demo .colors.input-label {
  color: rgba(0, 0, 0, 0.6);
}
.demo .colors.input-label div > .example {
  width: 16px;
  height: 16px;
  background: rgba(0, 0, 0, 0.6);
}
.demo .inputs {
  grid-template-columns: 6fr 6fr;
}
.demo .inputs > div {
  display: grid;
  align-items: center;
  grid-template-columns: 4fr 8fr;
  gap: 10px;
}
.demo .buttons {
  grid-template-columns: 1.5fr 1.5fr 9fr;
}
.demo .buttons > div {
  padding: 16px;
}
@charset "UTF-8";
/* 
    Goal: Storing all variables that will be used in the project.
    Content: Variables for colors, fonts, sizes, padding, and other repeating values.
*/
/* 
    Goal: Identify mixins that can be reused for specific styles.
    Contents: Mixins for media queries, Flexbox, Grid, animations, etc.
*/
/* 
  ===== Usage =====
  div {
      @include box(200px, 300px);
      @include box(200px);
  }
*/
/*
  ===== Usage =====
  .vertical-centered-element {
      @include flex-center-vert;
  }

  .horizontally-centered-element {
      flex-direction: column;
      @include flex-center-vert;
  }
*/
/* 
  ===== Usage ===== 
  @include font-face(Roboto, "./assets/Roboto", normal, normal);
*/
/*
  ===== Usage =====
  h1 {
      font-size: 10px;

      @include tablet {
          font-size: 12px;
      }

      @include desktop {
          font-size: 20px;
      }
  }
*/
/* 
    Goal: Identify functions that can be used for calculations and transformations.
    Contents: Functions for calculating sizes, converting colors, etc.
*/
/*
    Goal: Reset styles to default to normalize the appearance of elements across browsers.
    Contents: Style resets and normalization.
*/
*, *:before, *:after {
  box-sizing: border-box;
}

html, body, div, span, object, iframe, figure, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, code, em, img, small, strike, strong, sub, sup, tt, b, u, i, ol, ul, li, fieldset, form, label, table, caption, tbody, tfoot, thead, tr, th, td, main, canvas, embed, footer, header, nav, section, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -webkit-text-size-adjust: none;
     -moz-text-size-adjust: none;
          text-size-adjust: none;
}

footer, header, nav, section, main {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after, q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

input {
  border-radius: 0;
}

/*
    Goal: Defining styles for texts and typography.
    Contents: Fonts, font sizes, line spacing, heading and paragraph styles.
*/
@font-face {
  font-family: "Roboto";
  src: url("./fonts/Roboto/Roboto-Regular.eot");
  src: url("./fonts/Roboto/Roboto-Regular.eot?#iefix") format("embedded-opentype"), url("./fonts/Roboto/Roboto-Regular.woff") format("woff"), url("./fonts/Roboto/Roboto-Regular.ttf") format("truetype"), url("./fonts/Roboto/Roboto-Regular.svg#Roboto") format("svg");
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: "Roboto";
  src: url("./fonts/Roboto/Roboto-Bold.eot");
  src: url("./fonts/Roboto/Roboto-Bold.eot?#iefix") format("embedded-opentype"), url("./fonts/Roboto/Roboto-Bold.woff") format("woff"), url("./fonts/Roboto/Roboto-Bold.ttf") format("truetype"), url("./fonts/Roboto/Roboto-Bold.svg#Roboto") format("svg");
  font-weight: bold;
  font-style: normal;
}
body {
  font-family: "Roboto", sans-serif;
}

h1 {
  font-size: 6rem;
  line-height: 116px;
  letter-spacing: -0.09375rem;
  font-weight: bold;
}

h2 {
  font-size: 3.75rem;
  line-height: 72px;
  letter-spacing: -0.03125rem;
  font-weight: bold;
}

h3 {
  font-size: 3rem;
  line-height: 55px;
  font-weight: bold;
}

h4 {
  font-size: 2.125rem;
  line-height: 41px;
  letter-spacing: 0.015625rem;
  font-weight: bold;
}

h5 {
  font-size: 1.5rem;
  line-height: 32px;
}

h6 {
  font-size: 1.25rem;
  line-height: 32px;
  letter-spacing: -0.009375rem;
}

p {
  font-size: 0.875rem;
  line-height: 20px;
  letter-spacing: 0.010625rem;
}

blockquote {
  font-size: 0.75rem;
  line-height: 18px;
  letter-spacing: 0.125rem;
  margin: 0 0 20px 0;
  padding: 0.5em 1em;
  border-left: 1px solid #dd0b0b;
  background-color: #ffa500;
}

ul, ol {
  padding: 0 0 0 10px;
}

ul {
  list-style-type: none;
}

ol {
  list-style-type: decimal;
}

strong {
  font-weight: bold;
}

code {
  font-family: "Courier New", monospace;
  background-color: black;
  color: white;
  padding: 0.2em 0.4em;
  border-radius: 4px;
}

pre {
  font-family: "Courier New", monospace;
  background-color: black;
  color: white;
  padding: 1em;
  border-radius: 4px;
  overflow-x: auto;
  white-space: pre-wrap;
}

/*
    Goal: Define basic styles for elements.
    Content: Styles for links, buttons, tables, lists and other elements.
*/
/* Для Webkit (Chrome, Safari) */
::-webkit-scrollbar {
  width: 12px; /* Ширина скроллбара */
}

::-webkit-scrollbar-track {
  background: #f1f1f1; /* Цвет трека */
  border-radius: 10px; /* Закругление трека */
}

::-webkit-scrollbar-thumb {
  background: #888; /* Цвет ползунка */
  border-radius: 10px; /* Закругление ползунка */
}

::-webkit-scrollbar-thumb:hover {
  background: #555; /* Цвет ползунка при наведении */
}

.container {
  max-width: 1200px;
  width: 100%;
  margin: 0 auto;
  padding: 0 10px;
}

html, body {
  font-family: "Roboto", sans-serif;
  margin: 0;
  padding: 0;
}

a {
  text-decoration: none;
  color: #333;
}
a:hover, a:focus {
  color: #2ecc71;
}

#test-map {
  height: 500px;
}

header {
  padding: 30px 0;
}
header .header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
}
header .header-logo {
  font-size: 0.875rem;
  font-weight: bold;
}

/*
    Goal: Styling the footer (footer) of the site.
    Content: Styles for footer content, links and other elements.   
*/
.footer-container {
  display: flex;
  justify-content: center;
  padding: 30px 0;
}

/*
    Goal: Define a grid for the layout.
    Content: Styles for columns, containers and rows.
*/
/* 
    ======= Usage ========
  .container {
    @include grid-container(12, 24px);
  }

*/
/* 
    Purpose: Styling the sidebar (if used).
    Content: Styles for the sidebar, including its position and design.
*/
.input {
  display: inline-block;
  position: relative;
}
.input label {
  color: rgba(0, 0, 0, 0.6);
  font-size: 0.875rem;
  padding: 0px 4px;
  position: absolute;
  left: 8px;
  top: 8px;
}
.input select ~ label {
  padding: 0 4px 0 9px;
}
.input input, .input textarea, .input select {
  min-width: 220PX;
  resize: none;
  padding: 28px 12px 9px 12px;
  background: rgba(0, 0, 0, 0.0588235294);
  border-radius: 4px;
  font-size: 1rem;
  border: none;
  border-bottom: 1px solid rgba(0, 0, 0, 0.42);
}
.input input:focus, .input textarea:focus, .input select:focus {
  background: none;
  padding: 19px 12px 19px 12px;
  border: none;
  outline: 1px solid rgba(0, 0, 0, 0.42);
}
.input input:focus ~ label, .input textarea:focus ~ label, .input select:focus ~ label {
  background: white;
  top: -6px;
}

.custom-radio {
  position: absolute;
  z-index: -1;
  opacity: 0;
}

/* for the label element associated with .custom-radio */
.custom-radio + label {
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
}

/* create a before pseudo-element in label with the following styles */
.custom-radio + label::before {
  content: "";
  display: inline-block;
  width: 1em;
  height: 1em;
  flex-shrink: 0;
  flex-grow: 0;
  border: 1px solid #adb5bd;
  border-radius: 50%;
  margin-right: 0.5em;
  background-repeat: no-repeat;
  background-position: center center;
  background-size: 50% 50%;
}

/* styles when hovering over radio */
.custom-radio:not(:disabled):not(:checked) + label:hover::before {
  border-color: #b3d7ff;
}

/* styles for the active radio button (when clicked on) */
.custom-radio:not(:disabled):active + label::before {
  background-color: #b3d7ff;
  border-color: #b3d7ff;
}

/* styles for the radio button that has focus */
.custom-radio:focus + label::before {
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

/* styles for a radio button that has focus and is not in the checked state */
.custom-radio:focus:not(:checked) + label::before {
  border-color: #80bdff;
}

/* styles for a radio button that is in the checked state */
.custom-radio:checked + label::before {
  border-color: #2ecc71;
  background-color: #2ecc71;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e");
}

/* styles for a radio button that is in the disabled state */
.custom-radio:disabled + label::before {
  background-color: #e9ecef;
}

.custom-checkbox {
  position: absolute;
  z-index: -1;
  opacity: 0;
}
.custom-checkbox + label {
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
}
.custom-checkbox + label::before {
  content: "";
  display: inline-block;
  width: 1em;
  height: 1em;
  flex-shrink: 0;
  flex-grow: 0;
  border: 1px solid #adb5bd;
  border-radius: 0.25em;
  margin-right: 0.5em;
  background-repeat: no-repeat;
  background-position: center center;
  background-size: 50% 50%;
}

.custom-checkbox:checked + label::before {
  border-color: #2ecc71;
  background-color: #2ecc71;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3e%3c/svg%3e");
}

/* styles when hovering over checkbox */
.custom-checkbox:not(:disabled):not(:checked) + label:hover::before {
  border-color: #b3d7ff;
}

/* styles for the active state of the checkbox (when clicked on) */
.custom-checkbox:not(:disabled):active + label::before {
  background-color: #b3d7ff;
  border-color: #b3d7ff;
}

/* styles for the checkbox that has focus */
.custom-checkbox:focus + label::before {
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

/* styles for a checkbox that has focus and is not in the checked state */
.custom-checkbox:focus:not(:checked) + label::before {
  border-color: #80bdff;
}

/* styles for a checkbox that is in the disabled state */
.custom-checkbox:disabled + label::before {
  background-color: #e9ecef;
}

/*
    Goal: Styling buttons.
    Content: Styles for different button states.
*/
button {
  background-color: #3498db;
  border-radius: 4px;
  color: #fff;
  border: none;
  padding: 0.5em 1em;
  cursor: pointer;
}
button:hover, button:focus {
  background-color: #2ecc71;
}
button:disabled {
  background-color: #2ecc71;
  cursor: not-allowed;
}

.link-button {
  padding: 0.5rem 1rem;
  background-color: #2ecc71;
  color: #fff;
  border: none;
  border-radius: 4px;
  text-decoration: none;
  transition: background-color 0.3s;
}
.link-button:hover {
  background-color: #3498db;
}

/*
    Goal: Stylization of cards.
    Content: Styles for the appearance of cards, including padding, shadows, etc.
*/
/*
    Goal: Styling modal windows.
    Content: Styles for modal windows, their background, container and buttons.
*/
.nav-list {
  display: flex;
  list-style: none;
  padding: 0;
}
.nav-list li {
  margin: 0 1rem;
}
.nav-list li a {
  color: #333;
  text-decoration: none;
  transition: color 0.3s;
}
.nav-list li a:hover {
  color: #007bff;
}

/* 
    Goal: Style the default theme.
    Content: Used to store base styles that are applied to all elements of a web application. These styles define a standard appearance and provide a consistent default appearance.
*/
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
