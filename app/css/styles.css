/* 
    Goal: Storing all variables that will be used in the project.
    Content: Variables for colors, fonts, sizes, padding, and other repeating values.
*/
/* 
    Goal: Identify mixins that can be reused for specific styles.
    Contents: Mixins for media queries, Flexbox, Grid, animations, etc.
*/
/* 
  ===== Usage =====
  div {
      @include box(200px, 300px);
      @include box(200px);
  }
*/
/*
  ===== Usage =====
  .vertical-centered-element {
      @include flex-center-vert;
  }

  .horizontally-centered-element {
      flex-direction: column;
      @include flex-center-vert;
  }
*/
/* 
  ===== Usage ===== 
  @include font-face(Roboto, "./assets/Roboto", normal, normal);
*/
/*
  ===== Usage =====
  h1 {
      font-size: 10px;

      @include tablet {
          font-size: 12px;
      }

      @include desktop {
          font-size: 20px;
      }
  }
*/
/* 
    Goal: Identify functions that can be used for calculations and transformations.
    Contents: Functions for calculating sizes, converting colors, etc.
*/
.demo {
  position: relative;
  width: 100vw;
  height: 100vh;
}
.demo-nav {
  position: fixed;
  width: 100%;
  height: 100%;
  max-width: 400px;
  padding: 35px;
  background: rgba(0, 0, 0, 0.0784313725);
}
.demo-nav h2, .demo-nav h4, .demo-nav p, .demo-nav li {
  margin: 0 0 16px 0;
}
.demo-content {
  width: calc(100% - 400px);
  margin-left: auto;
}
.demo-content h5, .demo-content h4 {
  padding: 0 16px 40px 16px;
  font-weight: bold;
}
.demo-content section {
  margin: 0 0 40px 0;
}
.demo .items {
  padding: 50px 0 0 0;
}
.demo .items__item {
  display: grid;
  align-items: center;
  border-bottom: 1px solid lightgrey;
}
.demo .items__item > div {
  padding: 16px;
}
.demo .items__item .title {
  font-size: 0.875rem;
  font-weight: bold;
}
.demo .typography {
  grid-template-columns: 3fr 1.5fr 6fr;
}
.demo .colors {
  grid-template-columns: 1.5fr 1.5fr 9fr;
}
.demo .colors.text-primary {
  color: #333;
}
.demo .colors.text-primary div > .example {
  width: 16px;
  height: 16px;
  background: #333;
}
.demo .colors.text-secondary {
  color: rgba(0, 0, 0, 0.6);
}
.demo .colors.text-secondary div > .example {
  width: 16px;
  height: 16px;
  background: rgba(0, 0, 0, 0.6);
}
.demo .colors.text-disabled {
  color: rgba(0, 0, 0, 0.3803921569);
}
.demo .colors.text-disabled div > .example {
  width: 16px;
  height: 16px;
  background: rgba(0, 0, 0, 0.3803921569);
}
.demo .colors.main-primary {
  color: #3498db;
}
.demo .colors.main-primary div > .example {
  width: 16px;
  height: 16px;
  background: #3498db;
}
.demo .colors.main-secondary {
  color: #2ecc71;
}
.demo .colors.main-secondary div > .example {
  width: 16px;
  height: 16px;
  background: #2ecc71;
}
.demo .colors.main-background {
  color: #ffa500;
}
.demo .colors.main-background div > .example {
  width: 16px;
  height: 16px;
  background: #ffa500;
}
.demo .colors.main-border {
  color: #dd0b0b;
}
.demo .colors.main-border div > .example {
  width: 16px;
  height: 16px;
  background: #dd0b0b;
}
/* 
    Goal: Storing all variables that will be used in the project.
    Content: Variables for colors, fonts, sizes, padding, and other repeating values.
*/
/* 
    Goal: Identify mixins that can be reused for specific styles.
    Contents: Mixins for media queries, Flexbox, Grid, animations, etc.
*/
/* 
  ===== Usage =====
  div {
      @include box(200px, 300px);
      @include box(200px);
  }
*/
/*
  ===== Usage =====
  .vertical-centered-element {
      @include flex-center-vert;
  }

  .horizontally-centered-element {
      flex-direction: column;
      @include flex-center-vert;
  }
*/
/* 
  ===== Usage ===== 
  @include font-face(Roboto, "./assets/Roboto", normal, normal);
*/
/*
  ===== Usage =====
  h1 {
      font-size: 10px;

      @include tablet {
          font-size: 12px;
      }

      @include desktop {
          font-size: 20px;
      }
  }
*/
/* 
    Goal: Identify functions that can be used for calculations and transformations.
    Contents: Functions for calculating sizes, converting colors, etc.
*/
/*
    Goal: Reset styles to default to normalize the appearance of elements across browsers.
    Contents: Style resets and normalization.
*/
*, *:before, *:after {
  box-sizing: border-box;
}

html, body, div, span, object, iframe, figure, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, code, em, img, small, strike, strong, sub, sup, tt, b, u, i, ol, ul, li, fieldset, form, label, table, caption, tbody, tfoot, thead, tr, th, td, main, canvas, embed, footer, header, nav, section, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -webkit-text-size-adjust: none;
     -moz-text-size-adjust: none;
          text-size-adjust: none;
}

footer, header, nav, section, main {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after, q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

input {
  -webkit-appearance: none;
  border-radius: 0;
}

/*
    Goal: Defining styles for texts and typography.
    Contents: Fonts, font sizes, line spacing, heading and paragraph styles.
*/
body {
  font-family: "Arial, sans-serif";
}

h1 {
  font-size: 6rem;
  line-height: 116px;
  letter-spacing: -0.09375rem;
  font-weight: bold;
}

h2 {
  font-size: 3.75rem;
  line-height: 72px;
  letter-spacing: -0.03125rem;
  font-weight: bold;
}

h3 {
  font-size: 3rem;
  line-height: 55px;
  font-weight: bold;
}

h4 {
  font-size: 2.125rem;
  line-height: 41px;
  letter-spacing: 0.015625rem;
  font-weight: bold;
}

h5 {
  font-size: 1.5rem;
  line-height: 32px;
}

h6 {
  font-size: 1.25rem;
  line-height: 32px;
  letter-spacing: -0.009375rem;
}

p {
  font-size: 0.875rem;
  line-height: 20px;
  letter-spacing: 0.010625rem;
}

blockquote {
  font-size: 0.75rem;
  line-height: 18px;
  letter-spacing: 0.125rem;
  margin: 0 0 20px 0;
  padding: 0.5em 1em;
  border-left: 1px solid #dd0b0b;
  background-color: #ffa500;
}

ul, ol {
  padding: 0 0 0 10px;
}

ul {
  list-style-type: none;
}

ol {
  list-style-type: decimal;
}

strong {
  font-weight: bold;
}

code {
  font-family: "Courier New", monospace;
  background-color: black;
  color: white;
  padding: 0.2em 0.4em;
  border-radius: 4px;
}

pre {
  font-family: "Courier New", monospace;
  background-color: black;
  color: white;
  padding: 1em;
  border-radius: 4px;
  overflow-x: auto;
  white-space: pre-wrap;
}

/*
    Goal: Define basic styles for elements.
    Content: Styles for links, buttons, tables, lists and other elements.
*/
.container {
  max-width: 1200px;
  width: 100%;
  margin: 0 auto;
  padding: 0 10px;
}

html, body {
  font-family: "Arial, sans-serif";
  margin: 0;
  padding: 0;
}

a {
  text-decoration: none;
  color: #333;
}
a:hover, a:focus {
  color: #2ecc71;
}

button {
  background-color: #3498db;
  border-radius: 4px;
  color: #fff;
  border: none;
  padding: 0.5em 1em;
  cursor: pointer;
}
button:hover, button:focus {
  background-color: #2ecc71;
}
button:disabled {
  background-color: #2ecc71;
  cursor: not-allowed;
}

input,
textarea,
select {
  font-family: inherit;
  padding: 0.5em;
  border: 1px solid #dd0b0b;
  border-radius: 4px;
}
input:focus,
textarea:focus,
select:focus {
  border-color: #3498db;
  outline: none;
}

/*
    Goal: Styling the website header.
    Content: Styles for logo, navigation and other header elements.
*/
/*
    Goal: Styling the footer (footer) of the site.
    Content: Styles for footer content, links and other elements.   
*/
/*
    Goal: Define a grid for the layout.
    Content: Styles for columns, containers and rows.
*/
/* 
    ======= Usage ========
  .container {
    @include grid-container(12, 24px);
  }

*/
/* 
    Purpose: Styling the sidebar (if used).
    Content: Styles for the sidebar, including its position and design.
*/
/*
    Goal: Styling buttons.
    Content: Styles for different button states.
*/
/*
    Goal: Stylization of cards.
    Content: Styles for the appearance of cards, including padding, shadows, etc.
*/
/*
    Goal: Styling modal windows.
    Content: Styles for modal windows, their background, container and buttons.
*/
/* 
    Goal: Style the default theme.
    Content: Used to store base styles that are applied to all elements of a web application. These styles define a standard appearance and provide a consistent default appearance.
*/
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
