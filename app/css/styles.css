/* 
    Goal: Storing all variables that will be used in the project.
    Content: Variables for colors, fonts, sizes, padding, and other repeating values.
*/
/* 
    Goal: Identify mixins that can be reused for specific styles.
    Contents: Mixins for media queries, Flexbox, Grid, animations, etc.
*/
/* 
  ===== Usage =====
  div {
      @include box(200px, 300px);
      @include box(200px);
  }
*/
/*
  ===== Usage =====
  .vertical-centered-element {
      @include flex-center-vert;
  }

  .horizontally-centered-element {
      flex-direction: column;
      @include flex-center-vert;
  }
*/
/* 
  ===== Usage ===== 
  @include font-face(Roboto, "./assets/Roboto", normal, normal);
*/
/*
  ===== Usage =====
  h1 {
      font-size: 10px;

      @include tablet {
          font-size: 12px;
      }

      @include desktop {
          font-size: 20px;
      }
  }
*/
/* 
    Goal: Identify functions that can be used for calculations and transformations.
    Contents: Functions for calculating sizes, converting colors, etc.
*/
/*
    Goal: Reset styles to default to normalize the appearance of elements across browsers.
    Contents: Style resets and normalization.
*/
*, *:before, *:after {
  box-sizing: border-box;
}

html, body, div, span, object, iframe, figure, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, code, em, img, small, strike, strong, sub, sup, tt, b, u, i, ol, ul, li, fieldset, form, label, table, caption, tbody, tfoot, thead, tr, th, td, main, canvas, embed, footer, header, nav, section, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -webkit-text-size-adjust: none;
     -moz-text-size-adjust: none;
          text-size-adjust: none;
}

footer, header, nav, section, main {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after, q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

input {
  -webkit-appearance: none;
  border-radius: 0;
}

/*
    Goal: Defining styles for texts and typography.
    Contents: Fonts, font sizes, line spacing, heading and paragraph styles.
*/
body {
  font-family: "Arial, sans-serif";
}

h1 {
  font-size: 0.75rem;
  line-height: 18px;
  letter-spacing: 0.125rem;
}

h2 {
  font-size: 0.75rem;
  line-height: 18px;
  letter-spacing: 0.125rem;
}

h3 {
  font-size: 0.75rem;
  line-height: 18px;
  letter-spacing: 0.125rem;
}

h4 {
  font-size: 0.75rem;
  line-height: 18px;
  letter-spacing: 0.125rem;
}

h5 {
  font-size: 0.75rem;
  line-height: 18px;
  letter-spacing: 0.125rem;
}

h6 {
  font-size: 0.75rem;
  line-height: 18px;
  letter-spacing: 0.125rem;
}

p {
  font-size: 0.75rem;
  line-height: 18px;
  letter-spacing: 0.125rem;
  margin: 0 0 20px 0;
}

blockquote {
  font-size: 0.75rem;
  line-height: 18px;
  letter-spacing: 0.125rem;
  margin: 0 0 20px 0;
  padding: 0.5em 1em;
  border-left: 1px solid #ddd;
  background-color: #fff;
}

ul, ol {
  margin: 20px 0;
  padding: 0 0 0 10px;
}

ul {
  list-style-type: disc;
}

ol {
  list-style-type: decimal;
}

strong {
  font-weight: bold;
}

code {
  font-family: "Courier New", monospace;
  background-color: #fff;
  padding: 0.2em 0.4em;
  border-radius: 4px;
}

pre {
  font-family: "Courier New", monospace;
  background-color: #fff;
  padding: 1em;
  border-radius: 4px;
  overflow-x: auto;
  white-space: pre-wrap;
}

/*
    Goal: Define basic styles for elements.
    Content: Styles for links, buttons, tables, lists and other elements.
*/
@font-face {
  font-family: "Roboto";
  src: url("./assets/Roboto.eot");
  src: url("./assets/Roboto.eot?#iefix") format("embedded-opentype"), url("./assets/Roboto.woff") format("woff"), url("./assets/Roboto.ttf") format("truetype"), url("./assets/Roboto.svg#Roboto") format("svg");
  font-weight: normal;
  font-style: normal;
}
.container {
  max-width: 1200px;
  width: 100%;
  margin: 0 auto;
  padding: 0 10px;
}

html, body {
  font-family: "Arial, sans-serif";
  margin: 0;
  padding: 0;
}

a {
  text-decoration: none;
  color: #2ecc71;
}
a:hover, a:focus {
  color: #2ecc71;
}

button {
  background-color: #3498db;
  border-radius: 4px;
  color: #fff;
  border: none;
  padding: 0.5em 1em;
  cursor: pointer;
}
button:hover, button:focus {
  background-color: #2ecc71;
}
button:disabled {
  background-color: #2ecc71;
  cursor: not-allowed;
}

input,
textarea,
select {
  font-family: inherit;
  padding: 0.5em;
  border: 1px solid #ddd;
  border-radius: 4px;
}
input:focus,
textarea:focus,
select:focus {
  border-color: #3498db;
  outline: none;
}

/*
    Goal: Styling the website header.
    Content: Styles for logo, navigation and other header elements.
*/
/*
    Goal: Styling the footer (footer) of the site.
    Content: Styles for footer content, links and other elements.   
*/
/*
    Goal: Define a grid for the layout.
    Content: Styles for columns, containers and rows.
*/
/* 
    Purpose: Styling the sidebar (if used).
    Content: Styles for the sidebar, including its position and design.
*/
/*
    Goal: Styling buttons.
    Content: Styles for different button states.
*/
/*
    Goal: Stylization of cards.
    Content: Styles for the appearance of cards, including padding, shadows, etc.
*/
/*
    Goal: Styling modal windows.
    Content: Styles for modal windows, their background, container and buttons.
*/
/* 
    Goal: Style the default theme.
    Content: Used to store base styles that are applied to all elements of a web application. These styles define a standard appearance and provide a consistent default appearance.
*/
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
