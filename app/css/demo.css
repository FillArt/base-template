/* 
    Goal: Storing all variables that will be used in the project.
    Content: Variables for colors, fonts, sizes, padding, and other repeating values.
*/
/* 
    Goal: Identify mixins that can be reused for specific styles.
    Contents: Mixins for media queries, Flexbox, Grid, animations, etc.
*/
/* 
  ===== Usage =====
  div {
      @include box(200px, 300px);
      @include box(200px);
  }
*/
/*
  ===== Usage =====
  .vertical-centered-element {
      @include flex-center-vert;
  }

  .horizontally-centered-element {
      flex-direction: column;
      @include flex-center-vert;
  }
*/
/* 
  ===== Usage ===== 
  @include font-face(Roboto, "./assets/Roboto", normal, normal);
*/
/*
  ===== Usage =====
  h1 {
      font-size: 10px;

      @include tablet {
          font-size: 12px;
      }

      @include desktop {
          font-size: 20px;
      }
  }
*/
/* 
    Goal: Identify functions that can be used for calculations and transformations.
    Contents: Functions for calculating sizes, converting colors, etc.
*/
.demo-title {
  margin: 0 0 40px 0;
  padding: 0 16px;
}
.demo-nav {
  position: fixed;
  width: 100%;
  height: 100%;
  max-width: 400px;
  padding: 35px;
  background: rgba(0, 0, 0, 0.0784313725);
}
.demo-nav h2, .demo-nav h4, .demo-nav p, .demo-nav li {
  margin: 0 0 16px 0;
}
.demo-content h5, .demo-content h4 {
  font-weight: bold;
}
.demo-content section {
  margin: 0 0 40px 0;
}
.demo .items {
  padding: 50px 0 0 0;
}
.demo .items__item {
  display: grid;
  align-items: center;
  border-bottom: 1px solid lightgrey;
}
.demo .items__item > div {
  padding: 16px;
}
.demo .items__item .title {
  font-size: 0.875rem;
  font-weight: bold;
}
.demo .typography {
  grid-template-columns: 3fr 1.5fr 6fr;
}
.demo .colors {
  grid-template-columns: 1.5fr 1.5fr 9fr;
}
.demo .colors.text-primary {
  color: #333;
}
.demo .colors.text-primary div > .example {
  width: 16px;
  height: 16px;
  background: #333;
}
.demo .colors.text-secondary {
  color: rgba(0, 0, 0, 0.6);
}
.demo .colors.text-secondary div > .example {
  width: 16px;
  height: 16px;
  background: rgba(0, 0, 0, 0.6);
}
.demo .colors.text-disabled {
  color: rgba(0, 0, 0, 0.3803921569);
}
.demo .colors.text-disabled div > .example {
  width: 16px;
  height: 16px;
  background: rgba(0, 0, 0, 0.3803921569);
}
.demo .colors.main-primary {
  color: #3498db;
}
.demo .colors.main-primary div > .example {
  width: 16px;
  height: 16px;
  background: #3498db;
}
.demo .colors.main-secondary {
  color: #2ecc71;
}
.demo .colors.main-secondary div > .example {
  width: 16px;
  height: 16px;
  background: #2ecc71;
}
.demo .colors.main-background {
  color: #ffa500;
}
.demo .colors.main-background div > .example {
  width: 16px;
  height: 16px;
  background: #ffa500;
}
.demo .colors.main-border {
  color: #dd0b0b;
}
.demo .colors.main-border div > .example {
  width: 16px;
  height: 16px;
  background: #dd0b0b;
}
.demo .colors.input-background div > .example {
  width: 16px;
  height: 16px;
  background: rgba(0, 0, 0, 0.0588235294);
}
.demo .colors.input-label {
  color: rgba(0, 0, 0, 0.6);
}
.demo .colors.input-label div > .example {
  width: 16px;
  height: 16px;
  background: rgba(0, 0, 0, 0.6);
}
.demo .inputs {
  grid-template-columns: 6fr 6fr;
}
.demo .inputs > div {
  display: grid;
  align-items: center;
  grid-template-columns: 4fr 8fr;
  gap: 10px;
}
.demo .buttons {
  grid-template-columns: 2fr 2fr 8fr;
}
.demo .buttons > div {
  padding: 16px;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
